import telebot
import gspread, os, requests
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from flask import Flask, request

load_dotenv()
# ==== CONFIG ====
TELEGRAM_TOKEN = os.getenv('Tg_K')
SHEET_ID = os.getenv('SHEETY')
SECRETO = os.getenv('boomba')

app = Flask(__name__)

@app.route('/' + TOKEN, methods=['POST'])
def get_message():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@app.route('/')
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://tele-check.onrender.com/' + TOKEN)  # Replace with your Render app name!
    return "Webhook set!", 200


# ==== GOOGLE SHEETS AUTH ====
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_file(SECRETO, scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).sheet1

# ==== TELEGRAM BOT ====
bot = telebot.TeleBot(TELEGRAM_TOKEN)

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
                     "–§–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
                     "–í–∏–∫–ª–∞–¥–∞—á, –£—á–µ–Ω—å, –ì—Ä—É–ø–∞, –î–∞—Ç–∞ —Ç–∞ —á–∞—Å\n\n"
                     "‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –≥–∞–ª–æ—á–∫—É –∑ –ø—Ä–∏—á–∏–Ω–æ—é: –í–∏–∫–ª–∞–¥–∞—á, –£—á–µ–Ω—å, –ì—Ä—É–ø–∞, –î–∞—Ç–∞ —Ç–∞ —á–∞—Å, check, –ø—Ä–∏—á–∏–Ω–∞\n"
                     "‚ùå –ó–Ω—è—Ç–∏ –≥–∞–ª–æ—á–∫—É –∑ –ø—Ä–∏—á–∏–Ω–æ—é: –í–∏–∫–ª–∞–¥–∞—á, –£—á–µ–Ω—å, –ì—Ä—É–ø–∞, –î–∞—Ç–∞ —Ç–∞ —á–∞—Å, uncheck, –ø—Ä–∏—á–∏–Ω–∞\n"
                     "üìå –û—Å—Ç–∞–Ω–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä *–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π* ‚Äî –∫-—Å—Ç—å –¥—ñ—Ç–µ–π –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è (—è–∫—â–æ –±—ñ–ª—å—à–µ 2)."
                     "\n\n"
                     "–ü—Ä–∏–∫–ª–∞–¥: "
                     "–ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω, –ö–æ–≤–∞–ª—å –ú–∞—Ä—ñ—è, –ö–ì_–°–±18, 12.08.2025 15:00, check, –¥–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≥–æ—Ä; –ü–µ—Ç—Ä–µ–Ω–∫–æ –û–∫—Å–∞–Ω–∞; –°–∏–¥–æ—Ä–µ–Ω–∫–æ –õ—ñ–Ω–∞")
@bot.message_handler(func=lambda m: "," in m.text)
def handle_data(message):
    lines = message.text.strip().splitlines()
    responses = []

    # –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
    all_values = sheet.get_all_values()

    # –ó–±–µ—Ä–µ–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤, –¥–µ –ø–µ—Ä—à—ñ 4 –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ñ
    empty_rows = []
    max_row = len(all_values)

    for i, row_values in enumerate(all_values, start=1):
        if len(row_values) < 4 or all(v.strip() == "" for v in row_values[:4]):
            empty_rows.append(i)

    next_row_to_use = 0  # –Ü–Ω–¥–µ–∫—Å –≤ empty_rows

    for line_number, line in enumerate(lines, start=1):
        try:
            data = [x.strip() for x in line.split(",")]

            if len(data) < 4:
                responses.append(f"–†—è–¥–æ–∫ {line_number}: ‚ö† –§–æ—Ä–º–∞—Ç: –í–∏–∫–ª–∞–¥–∞—á, –£—á–µ–Ω—å, –ì—Ä—É–ø–∞, –î–∞—Ç–∞ —Ç–∞ —á–∞—Å [, check/uncheck, –ø—Ä–∏—á–∏–Ω–∞ [, —É—á–Ω—ñ —á–µ—Ä–µ–∑ ;]]")
                continue

            checkbox_action = None
            reason = ""
            students_list = ""

            if len(data) >= 5:
                last = data[4].lower()
                if last in ("check", "uncheck"):
                    checkbox_action = last
                    data_main = data[:4]

                    if len(data) > 5:
                        reason = data[5]

                    if len(data) > 6:
                        students_list = data[6]
                else:
                    data_main = data[:4]
                    reason = data[4]

                    if len(data) > 5:
                        students_list = data[5]
            else:
                data_main = data[:4]

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Ä—è–¥–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
            if next_row_to_use < len(empty_rows):
                row = empty_rows[next_row_to_use]
                next_row_to_use += 1
            else:
                max_row += 1
                row = max_row

            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
            sheet.update_cell(row, 1, data_main[0])
            sheet.update_cell(row, 2, data_main[1])
            sheet.update_cell(row, 3, data_main[2])
            sheet.update_cell(row, 4, data_main[3])

            if checkbox_action == "check":
                sheet.update_cell(row, 5, "TRUE")
            elif checkbox_action == "uncheck":
                sheet.update_cell(row, 5, "FALSE")

            if reason:
                sheet.update_cell(row, 6, reason)

            if students_list:
                sheet.update_cell(row, 8, students_list)

            responses.append(f"–†—è–¥–æ–∫ {line_number}: ‚úÖ –î–æ–¥–∞–Ω–æ —É —Ä—è–¥–æ–∫ {row}")

        except Exception as e:
            responses.append(f"–†—è–¥–æ–∫ {line_number}: ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    bot.send_message(message.chat.id, "\n".join(responses))


@bot.message_handler(commands=['check'])
def check_checkbox(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /check <–Ω–æ–º–µ—Ä_—Ä—è–¥–∫–∞> [–ø—Ä–∏—á–∏–Ω–∞]")
            return

        row = int(parts[1])
        reason = parts[2] if len(parts) == 3 else ""

        sheet.update_cell(row, 5, "TRUE")  # –ì–∞–ª–æ—á–∫–∞
        if reason:
            sheet.update_cell(row, 6, reason)  # –ü—Ä–∏—á–∏–Ω–∞

        bot.send_message(message.chat.id, f"‚úÖ –ì–∞–ª–æ—á–∫–∞ —É —Ä—è–¥–∫—É {row} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ–º–∞—î'}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


@bot.message_handler(commands=['uncheck'])
def uncheck_checkbox(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /uncheck <–Ω–æ–º–µ—Ä_—Ä—è–¥–∫–∞> [–ø—Ä–∏—á–∏–Ω–∞]")
            return

        row = int(parts[1])
        reason = parts[2] if len(parts) == 3 else ""

        sheet.update_cell(row, 5, "FALSE")  # –ó–Ω—è—Ç–∏ –≥–∞–ª–æ—á–∫—É
        if reason:
            sheet.update_cell(row, 6, reason)  # –ü—Ä–∏—á–∏–Ω–∞

        bot.send_message(message.chat.id, f"‚ùå –ì–∞–ª–æ—á–∫–∞ —É —Ä—è–¥–∫—É {row} –∑–Ω—è—Ç–∞!\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ–º–∞—î'}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    from waitress import serve
    serve(app, host="0.0.0.0", port=5000)